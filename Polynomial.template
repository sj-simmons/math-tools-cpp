// Polynomial.template  --  Copyright 2014 Scott Simmons

#include <iostream> 
#include <sstream>
#include <cmath>
#include "fft.h"

template <typename T>
std::string to_string(T value)
{
  std::ostringstream os;
  os << value;
  return os.str();
}

template <typename Item>
Polynomial<Item>::Polynomial(int numcoeffs) 
{ //constructor
  if (numcoeffs > 0) {
    coeffs_ = new Item[numcoeffs];
  } else coeffs_ = NULL;
  degree_ = numcoeffs - 1;
}

template <typename Item>
Polynomial<Item>::Polynomial(const Polynomial<Item> &source)
{ //copy constructor
  copy(source);
}

template <typename Item>
Polynomial<Item>::~Polynomial() 
{ //destructor 
  delete [] coeffs_; 
}

template <typename Item>
void Polynomial<Item>::copy(const Polynomial<Item> &poly)
{
  degree_ = poly.degree_;
  if (poly.degree_ > -1) {
    coeffs_ = new Item[degree_+1];
    for (int i=0; i<=degree_; ++i) 
      coeffs_[i] = poly.coeffs_[i];
  } else coeffs_ = NULL;
}

template <typename Item>
Polynomial<Item>& Polynomial<Item>::operator=(const Polynomial<Item> &source) 
{ //assignment operator 
  if (&source != this) {
    delete [] coeffs_;
    copy(source);
  }
  return *this;
}

template <typename Item>
Polynomial<Item>& Polynomial<Item>::operator+=(const Polynomial<Item> &source) 
{
  *this = this->operator+(source);
  return *this;
}

template <typename Item>
void Polynomial<Item>::set_coeffs(Item coeffs[])
{
  for (int i=0; i<=degree_; ++i)
    coeffs_[i] = coeffs[i];
  if (coeffs_[degree_] != 0)
    return;
  set_degree_();  
  if (degree_ < 0)  {
    delete [] coeffs_;
    coeffs_ = NULL;
  } else {
    downsize_();
  } 
}

template <typename Item>
void Polynomial<Item>::truncate(int n)
{
  degree_ = n;
  downsize_();
}

template <typename Item>
void Polynomial<Item>::set_degree_()
{                         
  do
    --degree_;    
  while (coeffs_[degree_] == 0 && degree_ > -1); 
}

template <typename Item>
void Polynomial<Item>::downsize_()
{                               
  Item *temp = new Item[degree_ + 1];
  for (int i=0; i <= degree_; ++i)
    temp[i] = coeffs_[i];
  delete [] coeffs_;
  coeffs_ = temp;
}

template <typename Item>
Polynomial<Item> Polynomial<Item>::operator+(const Polynomial<Item> &p2) const
{
  if (degree_ == -1 && p2.degree_ == -1) {
    Polynomial<Item> p(0); return p; }
  int len = degree_, short_len = p2.degree_;
  Item *shorter = p2.coeffs_, *longer = coeffs_; 
  if (degree_ < p2.degree_) {
    len = p2.degree_; short_len = degree_;
    shorter = coeffs_; longer = p2.coeffs_; 
  }

  Polynomial<Item> p(len+1);
  Item *a = new Item[len+1];

  for (int i = 0; i != short_len+1; ++i) 
    a[i] = shorter[i] + longer[i];
  for (int i = short_len + 1; i != len+1; ++i) 
    a[i] = longer[i];

  p.set_coeffs(a);
  delete [] a;
  return p;
}

template <typename Item>
Polynomial<Item> Polynomial<Item>::operator-(const Polynomial<Item> &p2) const
{
  return this->operator+(-p2);
}

template <typename Item>
Polynomial<Item> Polynomial<Item>::operator-() const
{
  Item *a = new Item[degree_ + 1]; 
  for (int i = 0; i <= degree_; ++i)
    a[i] = - coeffs_[i]; 
  Polynomial<Item> p(degree_+1);
  p.set_coeffs(a);
  delete [] a;
  return p;
}

template <typename Item>
Polynomial<Item> Polynomial<Item>::operator*(const Polynomial<Item> &p2) const
{
  if (degree_ == -1 || p2.degree_ == -1) {
    Polynomial<Item> p(0); return p; }

  int i, j, deg = degree_ + p2.degree_;
  int lowdeg = degree_, highdeg = p2.degree_;
  Item *shorter = coeffs_, *longer = p2.coeffs_;
  Item *a = new Item[deg + 1], sum;

  if (degree_ > p2.degree_) {
    shorter = p2.coeffs_; longer  = coeffs_;
    lowdeg  = p2.degree_; highdeg = degree_;
  }

  for (i=0; i <= highdeg; ++i) {
    sum = 0; 
    if (i <= lowdeg) {
      for (j=0; j <= i; ++j)
        sum += shorter[j] * longer[i-j];
      a[i] = sum;
    }
    else {
      for (j=0; j <= lowdeg; ++j)
        sum += shorter[j] * longer[i-j];
      a[i] = sum;
    }
  }
  for (i=0; i < lowdeg; ++i) {
    sum = 0; 
    for (j=i+1; j <= lowdeg; ++j)
      sum += shorter[j] * longer[highdeg+1+i-j];
    a[highdeg+1+i] = sum;
  }

  Polynomial<Item> p(deg + 1); 
  p.set_coeffs(a);
  delete [] a;
  return p;
}

template <typename Item>
Polynomial<Item> Polynomial<Item>::fftmult(const Polynomial<Item> &p2) const
{
  int i, deg = degree_ + p2.degree_;
  int size_fft = pow(2,ceil(log2(deg+1)));
  double *fft1 = new double [2*size_fft]; 
  double *fft2 = new double [2*size_fft]; 
  double *ifft = new double [2*size_fft];
  double *a = new double[deg+1];

  for (i = 0; i < size_fft; ++i) {
    if (i <= degree_) fft1[2*i] = coeffs_[i];
    else fft1[2*i] = 0; 
    fft1[2*i+1] = 0;
  }

  for (i = 0; i < size_fft; ++i) {
    if (i <= p2.degree_) fft2[2*i] = p2.coeffs_[i];
    else fft2[2*i] = 0; 
    fft2[2*i+1] = 0;
  }

  four1(fft1, size_fft, 1);
  four1(fft2, size_fft, 1);

  for (i = 0; i < size_fft; ++i) {
    ifft[2*i] = fft1[2*i] * fft2[2*i] - fft1[2*i+1] * fft2[2*i+1];
    ifft[2*i+1] = fft1[2*i] * fft2[2*i+1] + fft1[2*i+1] * fft2[2*i];
  }

  four1(ifft, size_fft, -1);

  for (i = 0; i <= deg; ++i) 
    a[i] = ifft[2*i]/size_fft;

  Polynomial<Item> p(deg+1);
  p.set_coeffs(a);
  delete [] a; delete [] fft1; delete [] fft2; delete [] ifft;
  return p; 
}

template <typename Item>
Polynomial<Item> pow(const Polynomial<Item> &p, unsigned n)
{ 
  if (n == 1) return p;   
  else {
    Polynomial<Item> factor = pow(p, n/2);
    if (n % 2 == 0) return factor * factor;
    else return factor * factor * p;
  }
}

template <typename Item>
Polynomial<Item> fftpow(const Polynomial<Item> &p, unsigned n)
{ 
  if (n == 1) return p;   
  else {
    Polynomial<Item> factor = pow(p, n/2);
    if (n % 2 == 0) return factor.fftmult(factor);
    else return factor.fftmult(factor.fftmult(p));
  }
}

template <typename Item>
std::ostream& operator<<(std::ostream &os, const Polynomial<Item> &p)
{
  if (p.degree() < 0) {os << '0'; return os;} 
  std::string s = "" ;
  if (p[0] != 0) s += to_string(p[0]) + " "; 
  for (int i = 1; i <= p.degree(); ++i) {
    if (p[i] > 0) { 
      if (s == "" && to_string(p[i]) != "1") s += to_string(p[i]);
      else {
        if (to_string(p[i]) != "1" ) s += "+ " + to_string(p[i]);
        else if (s != "") s += "+ "; 
      }
    }
    else if (p[i] < 0) {
      if (to_string(p[i]) != "-1") s += "- " + to_string(-p[i]);
      else s += "- ";
    }
    if (p[i] != 0) {
      if (i == 1) s += "x ";
      else if (i != 1 && i == p.degree()) s += "x^" + to_string(i);
      else if (i != 1) s += "x^" + to_string(i) + " ";
    }
  }
  os << s;
  return os;
}
